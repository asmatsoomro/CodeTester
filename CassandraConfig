import org.springframework.context.annotation.Configuration
import org.springframework.data.cassandra.config.AbstractReactiveCassandraConfiguration
import org.springframework.data.cassandra.config.CassandraClusterFactoryBean
import org.springframework.data.cassandra.config.CassandraSessionFactoryBean
import org.springframework.data.cassandra.core.CassandraOperations
import org.springframework.data.cassandra.core.CassandraTemplate
import org.springframework.data.cassandra.core.mapping.CassandraMappingContext

@Configuration
class CassandraConfig : AbstractReactiveCassandraConfiguration() {

    override fun getKeyspaceName(): String {
        return "promotion"
    }

    override fun cluster(): CassandraClusterFactoryBean {
        val cluster = CassandraClusterFactoryBean()
        cluster.setContactPoints("127.0.0.1") // Set the Cassandra contact points
        cluster.setPort(9042) // Set the Cassandra port
        cluster.setKeyspaceCreations(getKeyspaceCreations())
        return cluster
    }

    override fun session(): CassandraSessionFactoryBean {
        val session = CassandraSessionFactoryBean()
        session.setCluster(cluster().`object`)
        session.setKeyspaceName(getKeyspaceName())
        session.setConverter(cassandraConverter())
        return session
    }

    override fun cassandraMapping(): CassandraMappingContext {
        return CassandraMappingContext()
    }

    fun cassandraTemplate(session: CassandraSessionFactoryBean): CassandraOperations {
        return CassandraTemplate(session.`object`)
    }
}



import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.data.cassandra.config.AbstractCassandraConfiguration
import org.springframework.data.cassandra.config.CassandraCqlSessionFactoryBean
import org.springframework.data.cassandra.repository.config.EnableCassandraRepositories

@Configuration
@EnableCassandraRepositories(basePackages = ["com.example.repository"])
class CassandraConfig : AbstractCassandraConfiguration() {

    @Value("\${spring.data.cassandra.contact-points}")
    private lateinit var contactPoints: String

    @Value("\${spring.data.cassandra.port}")
    private var port: Int = 9042

    override fun getKeyspaceName(): String {
        return "promotion"
    }

    override fun getContactPoints(): String {
        return contactPoints
    }

    override fun getPort(): Int {
        return port
    }

    @Bean
    override fun cassandraSessionFactory(): CassandraCqlSessionFactoryBean {
        return super.cassandraSessionFactory()
    }
}


import org.springframework.stereotype.Service

@Service
class PromoService {
    fun convertToPromoDef(promo: Promo): PromoDef {
        return PromoDef(
            promoId = promo.promoId,
            storeNo = promo.storeNo,
            type = promo.type,
            active = promo.active,
            startDate = promo.startDate,
            endDate = promo.endDate,
            originalDescription = promo.originalDescription,
            couponUsageLimit = promo.couponUsageLimit,
            extrabuckCouponAmount = promo.extrabuckCouponAmount,
            extrabuckOfferTypeCode = promo.extrabuckOfferTypeCode,
            extrabuckThresholdAmount = promo.extrabuckThresholdAmount,
            minimumQuantity = promo.minimumQuantity,
            minimumSpendAmount = promo.minimumSpendAmount,
            offerBuyQuantity = promo.offerBuyQuantity,
            offerGetQuantity = promo.offerGetQuantity,
            offerPrice = promo.offerPrice,
            offerSaleAmount = promo.offerSaleAmount,
            offerSaleQty = promo.offerSaleQty,
            percentageDollarOffAmount = promo.percentageDollarOffAmount,
            percentageOfferCapAmount = promo.percentageOfferCapAmount,
            reducedAmount = promo.reducedAmount,
            regularRetailIndicator = promo.regularRetailIndicator,
            saleOfferType = promo.saleOfferType,
            secondaryPriceAmount = promo.secondaryPriceAmount,
            adblockNumber = promo.adblockNumber,
            adpageNumber = promo.adpageNumber,
            adpromotypeNumber = promo.adpromotypeNumber,
            adVersionCode = promo.adVersionCode,
            bopisEligibleIndicator = promo.bopisEligibleIndicator,
            orderLevelIndicator = promo.orderLevelIndicator,
            priority = promo.priority,
            promoDisclaimer = promo.promoDisclaimer,
            skulistText = promo.skulistText,
            promoTypeCode = promo.promoTypeCode,
            promoActiveIndicator = promo.promoActiveIndicator,
            state = promo.state,
            offerMinimumQuantity = promo.offerMinimumQuantity,
            itemValidationRequired = promo.itemValidationRequired,
            bopisItemQuantity = promo.bopisItemQuantity,
            bopisMinimumSpeedAmount = promo.bopisMinimumSpeedAmount,
            requestedCouponCount = promo.requestedCouponCount,
            shippingMethodCode = promo.shippingMethodCode
        )
    }
}


