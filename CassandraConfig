
import io.mockk.*
import org.junit.jupiter.api.*
import org.springframework.boot.test.context.*
import org.springframework.boot.test.mock.mockito.*
import org.springframework.kafka.core.*
import reactor.core.publisher.*

@SpringBootTest
class PromoProcessorTest {
    @Mockk
    private lateinit var kafkaConfig: KafkaConfig

    @Mockk
    private lateinit var promoUtil: PromoUtil

    @Mockk
    private lateinit var promoService: PromoService

    @InjectMocks
    private lateinit var promoProcessor: PromoProcessor

    @BeforeEach
    fun setUp() {
        MockKAnnotations.init(this)
        every { kafkaConfig.retailclientId } returns "test-client"
        every { promoUtil.retailPromoConfig() } returns mockk()
        every { promoUtil.retailPromoConfig().receiveAutoAck() } returns Flux.empty()
    }

    @Test
    fun testConsumeRecords() {
        promoProcessor.consumeRecords()

        // Verify that the expected methods are called
        verify { promoUtil.retailPromoConfig() }
        verify { promoUtil.retailPromoConfig().receiveAutoAck() }
    }
}




import org.junit.ClassRule
import org.junit.Rule
import org.junit.Test
import org.springframework.kafka.test.rule.EmbeddedKafkaRule
import org.springframework.kafka.test.utils.KafkaTestUtils

// Define the EmbeddedKafkaRule
@ClassRule
val embeddedKafkaRule = EmbeddedKafkaRule(1)

class PromoProcessorTest {
    @Rule
    // Inject the EmbeddedKafkaRule into the test class
    val embeddedKafka = embeddedKafkaRule
    
    @Test
    fun testConsumeRecords() {
        // Set up the embedded Kafka environment
        val embeddedKafkaBroker = embeddedKafka.embeddedKafka
        val producerProps = KafkaTestUtils.producerProps(embeddedKafkaBroker)
        val consumerProps = KafkaTestUtils.consumerProps("consumer-group", "false", embeddedKafkaBroker)
        
        // Create a producer and send a test message
        val producer = KafkaProducer<String, Promo>(producerProps)
        val topic = "test-topic"
        val promo = Promo()
        promo.type = "promoType"
        promo.id = "promoId"
        producer.send(ProducerRecord(topic, promo))
        producer.flush()
        
        // Create the PromoProcessor instance
        val kafkaConfig = KafkaConfig()
        kafkaConfig.retailBootstrapServers = embeddedKafkaBroker.brokerAddresses[0].toString()
        kafkaConfig.retailClientId = "test-client"
        kafkaConfig.retailGroupId = "test-group"
        val promoUtil = PromoUtil(kafkaConfig)
        val promoService = Mockito.mock(PromoService::class.java)
        val promoProcessor = PromoProcessor(kafkaConfig, promoUtil, promoService)
        
        // Call the consumeRecords() method
        promoProcessor.consumeRecords()
        
        // Assert the expected behavior
        
        // Verify that promoService.savePromoToDB() is called with the correct promo
        Mockito.verify(promoService).savePromoToDB(promo)
    }
}
