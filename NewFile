package com.example.promoprice.controller

import com.example.promoprice.model.PricingPromoResponse
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

@RestController
@RequestMapping("/promo-price/services/v1/sku-variants")
class SkuVariantController {

    @GetMapping("/{skuId}")
    fun getSkuVariant(@PathVariable skuId: String): ResponseEntity<PricingPromoResponse> {
        // Create dummy test data
        val pricingPromoResponse = PricingPromoResponse(
            skuId = skuId,
            storeId = "store123",
            context = "context123",
            singleSkuProduct = true,
            skuPrice = PricingPromoResponse.SkuPrice(
                listPrice = 10,
                salePrice = 8,
                carePassPrice = 7,
                unitPrice = "unit123"
            ),
            skuRangePrice = PricingPromoResponse.SkuRangePrice(
                listPriceMin = 9,
                listPriceMax = 11,
                salePriceMin = 7,
                salePriceMax = 9,
                carePassPriceMin = 6,
                carePassPriceMax = 8,
                unitPriceMin = "unitmin123",
                unitPriceMax = "unitmax123"
            ),
            variants = listOf(
                PricingPromoResponse.Variant(
                    skuId = "variant1",
                    storeId = "store123",
                    skuPrice = PricingPromoResponse.SkuPrice(
                        listPrice = 15,
                        salePrice = 12,
                        carePassPrice = 10,
                        unitPrice = "variantunit123"
                    ),
                    variantSkuPromotions = listOf(
                        PricingPromoResponse.SkuPromotion(
                            unitPrice = "variantunit123",
                            description = "variantdesc123",
                            startDate = "2023-06-01",
                            endDate = "2023-06-30",
                            promoId = "promo123",
                            adBlockId = "adblock123",
                            saleOfferType = "discount",
                            eventId = "event123"
                        )
                    )
                )
            ),
            skuPromotions = listOf(
                PricingPromoResponse.SkuPromotion(
                    unitPrice = "unit123",
                    description = "desc123",
                    startDate = "2023-06-01",
                    endDate = "2023-06-30",
                    promoId = "promo123",
                    adBlockId = "adblock123",
                    saleOfferType = "discount",
                    eventId = "event123"
                )
            )
        )

        return ResponseEntity.ok(pricingPromoResponse)
    }
}


package com.example.promoprice.model

data class PricingPromoResponse(
    val skuId: String,
    val storeId: String,
    val context: String,
    val singleSkuProduct: Boolean,
    val skuPrice: SkuPrice,
    val skuRangePrice: SkuRangePrice,
    val variants: List<Variant>,
    val skuPromotions: List<SkuPromotion>
) {
    data class SkuPrice(
        val listPrice: Int,
        val salePrice: Int,
        val carePassPrice: Int,
        val unitPrice: String
    )

    data class SkuRangePrice(
        val listPriceMin: Int,
        val listPriceMax: Int,
        val salePriceMin: Int,
        val salePriceMax: Int,
        val carePassPriceMin: Int,
        val carePassPriceMax: Int,
        val unitPriceMin: String,
        val unitPriceMax: String
    )

    data class Variant(
        val skuId: String,
        val storeId: String,
        val skuPrice: SkuPrice,
        val variantSkuPromotions: List<SkuPromotion>
    )

    data class SkuPromotion(
        val unitPrice: String,
        val description: String,
        val startDate: String,
        val endDate: String,
        val promoId: String,
        val adBlockId: String,
        val saleOfferType: String,
        val eventId: String
    )
}



package com.example.promoprice.service

import com.example.promoprice.model.SkuPromotion
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import org.springframework.web.client.RestTemplate

@Service
class PromoService {
    @Autowired
    lateinit var restTemplate: RestTemplate

    fun getSkuPromotions(skuId: String): Array<SkuPromotion>? {
        val promoServiceUrl = "http://promo-service-url/promo-price/services/v1/sku/{skuId}"
        val response = restTemplate.getForObject(promoServiceUrl, Array<SkuPromotion>::class.java, skuId)
        return response
    }
}


package com.example.promoprice.model

data class SkuPromotion(
    val unitPrice: String,
    val description: String,
    val startDate: String,
    val endDate: String,
    val promoId: String,
    val adBlockId: String,
    val saleOfferType: String,
    val eventId: String
)

//----version 2 controller 


@RestController
@RequestMapping("/promo-price/services/v1/sku-variants")
class SkuVariantController(
    private val promoService: PromoService
) {

    @GetMapping("/{skuId}")
    fun getSkuVariant(@PathVariable skuId: String): ResponseEntity<PricingPromoResponse> {
        // Call PromoService to retrieve SkuPromotions
        val skuPromotions: Array<SkuPromotion>? = promoService.getSkuPromotions(skuId)

        // Create dummy test data
        val pricingPromoResponse = PricingPromoResponse(
            skuId = skuId,
            storeId = "store123",
            context = "context123",
            singleSkuProduct = true,
            skuPrice = PricingPromoResponse.SkuPrice(
                listPrice = 10,
                salePrice = 8,
                carePassPrice = 7,
                unitPrice = "unit123"
            ),
            skuRangePrice = PricingPromoResponse.SkuRangePrice(
                listPriceMin = 9,
                listPriceMax = 11,
                salePriceMin = 7,
                salePriceMax = 9,
                carePassPriceMin = 6,
                carePassPriceMax = 8,
                unitPriceMin = "unitmin123",
                unitPriceMax = "unitmax123"
            ),
            variants = listOf(
                PricingPromoResponse.Variant(
                    skuId = "variant1",
                    storeId = "store123",
                    skuPrice = PricingPromoResponse.SkuPrice(
                        listPrice = 15,
                        salePrice = 12,
                        carePassPrice = 10,
                        unitPrice = "variantunit123"
                    ),
                    variantSkuPromotions = skuPromotions?.map {
                        PricingPromoResponse.SkuPromotion(
                            unitPrice = it.unitPrice,
                            description = it.description,
                            startDate = it.startDate,
                            endDate = it.endDate,
                            promoId = it.promoId,
                            adBlockId = it.adBlockId,
                            saleOfferType = it.saleOfferType,
                            eventId = it.eventId
                        )
                    } ?: emptyList()
                )
            ),
            skuPromotions = emptyList() // Populate with actual skuPromotions if needed
        )

        return ResponseEntity.ok(pricingPromoResponse)
    }
}


