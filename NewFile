import io.mockk.*
import io.mockk.impl.annotations.InjectMockKs
import io.mockk.impl.annotations.MockK
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.kafka.core.reactive.ReactiveKafkaConsumerTemplate

class PromoUtilTest {

    @MockK
    private lateinit var kafkaConfig: KafkaConfig

    @InjectMockKs
    private lateinit var promoUtil: PromoUtil

    @BeforeEach
    fun setup() {
        MockKAnnotations.init(this)
    }

    @Test
    fun testRetailPromoConfig() {
        // Mock the required dependencies and their behavior
        val apiKey = "your-api-key"
        val apiSecret = "your-api-secret"
        val bootstrapServers = "your-bootstrap-servers"
        val clientId = "your-client-id"
        val groupId = "your-group-id"
        val securityProtocol = "your-security-protocol"
        val sasMechanism = "your-sas-mechanism"
        val keyDeserializer = "your-key-deserializer"
        val service = "your-service"
        val autoOffsetReset = "your-auto-offset-reset"
        val topic = "your-topic"

        every { kafkaConfig.retailApiKey } returns apiKey
        every { kafkaConfig.retailApiSecret } returns apiSecret
        every { kafkaConfig.consumerBootstrapServers } returns bootstrapServers
        every { kafkaConfig.retailClientId } returns clientId
        every { kafkaConfig.retailGroupId } returns groupId
        every { kafkaConfig.consumerSecurityProtocol } returns securityProtocol
        every { kafkaConfig.consumerSasMechanism } returns sasMechanism
        every { kafkaConfig.consumerKeyDeserializer } returns keyDeserializer
        every { kafkaConfig.retailService } returns service
        every { kafkaConfig.consumerAuthoffsetReset } returns autoOffsetReset
        every { kafkaConfig.retailTopic } returns topic

        // Mock the ReactiveKafkaConsumerTemplate
        val consumerTemplate = mockk<ReactiveKafkaConsumerTemplate<String, Promo>>()
        every { promoUtil.retailPromoConfig() } returns consumerTemplate

        // Execute the method to be tested
        val result = promoUtil.retailPromoConfig()

        // Verify the interactions and assertions
        verify {
            kafkaConfig.retailApiKey
            kafkaConfig.retailApiSecret
            kafkaConfig.consumerBootstrapServers
            kafkaConfig.retailClientId
            kafkaConfig.retailGroupId
            kafkaConfig.consumerSecurityProtocol
            kafkaConfig.consumerSasMechanism
            kafkaConfig.consumerKeyDeserializer
            kafkaConfig.retailService
            kafkaConfig.consumerAuthoffsetReset
            kafkaConfig.retailTopic
            promoUtil.retailPromoConfig()
        }

        // Perform additional assertions on the result if needed
        // For example:
        // assertEquals(consumerTemplate, result)
    }
}


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'io.mockk:mockk:1.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.13.0'
}
