import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import reactor.core.publisher.Mono

@RestController
@RequestMapping("/variants")
class SkuVariantController(
    private val pricingService: PricingService,
    private val promoService: PromoService
) {

    @GetMapping("/{skuId}")
    fun getVariantPricingPromo(@PathVariable skuId: String): Mono<ResponseEntity<PricingPromoResponse>> {
        val pricingMono = pricingService.getPricingData(skuId)
        val promoMono = promoService.getPromoData(skuId)

        return Mono.zip(pricingMono, promoMono)
            .map { (pricingResponse, promoResponse) ->
                val pricingPromoResponse = PricingPromoResponse(
                    responseData = pricingResponse.responseData,
                    xgridId = pricingResponse.xgridId,
                    promoData = promoResponse.promoData
                )
                ResponseEntity.ok(pricingPromoResponse)
            }
            .onErrorReturn { ex ->
                // Handle error scenarios
                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build()
            }
    }
}


import org.springframework.http.HttpStatus
import org.springframework.stereotype.Service
import org.springframework.web.client.HttpClientErrorException
import org.springframework.web.client.UnknownHttpStatusCodeException
import org.springframework.web.client.RestTemplate
import reactor.core.publisher.Mono

@Service
class PricingService(private val restTemplate: RestTemplate) {

    fun getPricingData(skuId: String): Mono<PricingResponse> {
        val url = "https://api.example.com/pricing-service/{skuId}"
        val requestUrl = url.replace("{skuId}", skuId)

        return Mono.fromCallable {
            restTemplate.getForObject(requestUrl, PricingResponse::class.java)
        }.onErrorMap { ex ->
            when (ex) {
                is HttpClientErrorException -> {
                    val statusCode = ex.statusCode
                    if (statusCode == HttpStatus.NOT_FOUND) {
                        // Handle 404 Not Found
                        // Do something...
                    }
                    // Handle other status codes as needed

                    HttpClientErrorException(statusCode)
                }
                is UnknownHttpStatusCodeException -> {
                    IllegalStateException("Unknown HTTP status code: ${ex.rawStatusCode}", ex)
                }
                else -> ex
            }
        }
    }
}



import org.springframework.http.HttpStatus
import org.springframework.stereotype.Service
import org.springframework.web.client.HttpClientErrorException
import org.springframework.web.client.UnknownHttpStatusCodeException
import org.springframework.web.client.RestTemplate
import reactor.core.publisher.Mono

@Service
class PromoService(private val restTemplate: RestTemplate) {

    fun getPromoData(skuId: String): Mono<PromoResponse> {
        val url = "https://api.example.com/promo-service/{skuId}"
        val requestUrl = url.replace("{skuId}", skuId)

        return Mono.fromCallable {
            restTemplate.getForObject(requestUrl, PromoResponse::class.java)
        }.onErrorMap { ex ->
            when (ex) {
                is HttpClientErrorException -> {
                    val statusCode = ex.statusCode
                    if (statusCode == HttpStatus.NOT_FOUND) {
                        // Handle 404 Not Found
                        // Do something...
                    }
                    // Handle other status codes as needed

                    HttpClientErrorException(statusCode)
                }
                is UnknownHttpStatusCodeException -> {
                    IllegalStateException("Unknown HTTP status code: ${ex.rawStatusCode}", ex)
                }
                else -> ex
            }
        }
    }
}

