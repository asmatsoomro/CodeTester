import com.fasterxml.jackson.annotation.JsonProperty

data class PricingResponse(
    @JsonProperty("response") val response: Response,
    @JsonProperty("skuId") val skuId: String,
    @JsonProperty("storeId") val storeId: String,
    @JsonProperty("skuPrice") val skuPrice: SkuPrice,
    @JsonProperty("xgridId") val xgridId: String
) {
    data class Response(
        @JsonProperty("skuId") val skuId: String,
        @JsonProperty("storeId") val storeId: String,
        @JsonProperty("skuPrice") val skuPrice: SkuPrice
    )

    data class SkuPrice(
        @JsonProperty("listPrice") val listPrice: Double,
        @JsonProperty("salePrice") val salePrice: Double,
        @JsonProperty("carepassPrice") val carepassPrice: Double,
        @JsonProperty("unitPrice") val unitPrice: String
    )

    data class SkuRangePrice(
        @JsonProperty("listPriceMin") val listPriceMin: Double,
        @JsonProperty("listPriceMax") val listPriceMax: Double,
        @JsonProperty("salePriceMin") val salePriceMin: Double,
        @JsonProperty("salePriceMax") val salePriceMax: Double,
        @JsonProperty("carePassPriceMin") val carePassPriceMin: Double,
        @JsonProperty("carePassPriceMax") val carePassPriceMax: Double,
        @JsonProperty("unitPriceMin") val unitPriceMin: String,
        @JsonProperty("unitPriceMax") val unitPriceMax: String
    )

    data class Variant(
        @JsonProperty("skuId") val skuId: String,
        @JsonProperty("storeId") val storeId: String,
        @JsonProperty("skuPrice") val skuPrice: SkuPrice
    )
}


import org.springframework.stereotype.Service
import org.springframework.web.client.RestTemplate

@Service
class PricingService(private val restTemplate: RestTemplate) {

    fun getPricingData(skuId: String): PricingResponse {
        // Call the pricing service API to fetch pricing data for the given SKU ID
        val url = "/pricing/services/v1/{skuId}"
        val response = restTemplate.getForObject(url, PricingResponse::class.java, skuId)
        return response?.copy(response = response.response.copy(skuId = skuId))
            ?: throw Exception("Failed to fetch pricing data for SKU: $skuId")
    }
}



@RestController
@RequestMapping("/promo-price/services/v1/sku-variants")
class SkuVariantController {

    @Autowired
    private lateinit var cachingService: CachingService

    @Autowired
    private lateinit var promoService: PromoService

    @Autowired
    private lateinit var pricingService: PricingService

    @GetMapping("/{skuId}")
    fun getPromoPriceForSku(@PathVariable skuId: String): PricingPromoResponse {
        val cachedResponse = cachingService.getCachedPricingPromoResponse(skuId)
        if (cachedResponse != null) {
            return cachedResponse
        }

        val promoResponseDeferred = runBlocking { async { promoService.getPromoResponse(skuId) } }
        val pricingResponseDeferred = runBlocking { async { pricingService.getPricingData(skuId) } }

        val promoResponse = promoResponseDeferred.await()
        val pricingResponse = pricingResponseDeferred.await()

        val pricingPromoResponse = PricingPromoResponse(
            skuId = skuId,
            storeId = pricingResponse.responseData?.storeId ?: "",
            context = "FS",
            singleSkuProduct = true,
            skuPrice = pricingResponse.responseData?.skuPrice,
            skuRangePrice = pricingResponse.responseData?.skuRangePrice,
            variants = pricingResponse.responseData?.variants?.map {
                PricingPromoResponse.Variant(
                    skuId = it.skuId ?: "",
                    storeId = it.storeId ?: "",
                    skuPrice = it.skuPrice
                )
            } ?: emptyList(),
            skuPromotions = promoResponse.skuPromotions.map {
                PricingPromoResponse.SkuPromotion(
                    unitPrice = it.unitPrice,
                    description = it.description,
                    startDate = it.startDate,
                    endDate = it.endDate,
                    promoId = it.promoId,
                    adBlockId = it.adBlockId,
                    saleOfferType = it.saleOfferType,
                    eventId = it.eventId
                )
            }
        )

        cachingService.cachePricingPromoResponse(skuId, pricingPromoResponse)

        return pricingPromoResponse
    }
}

