import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.StringDeserializer
import org.springframework.kafka.core.reactive.ReactiveKafkaConsumerTemplate
import org.springframework.kafka.support.serializer.JsonDeserializer
import reactor.core.publisher.Flux

data class Promo(val promoId: String, val promoDescription: String)

fun main(args: Array<String>) {
    val bootstrapServers = "cluster.playground.cdkt.io:9092"
    val groupId = "promo-group"
    val topic = "promo-topic"
    val securityProtocol = "SASL_SSL"
    val saslJaasConfig = """org.apache.kafka.common.security.plain.PlainLoginModule required username="4CejvDUGJh2BfcbR9uDAMD" password="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2F1dGguY29uZHVrdG9yLmlvIiwic291cmNlQXBwbGljYXRpb24iOiJhZG1pbiIsInVzZXJNYWlsIjpudWxsLCJwYXlsb2FkIjp7InZhbGlkRm9yVXNlcm5hbWUiOiI0Q2VqdkRVR0poMkJmY2JSOXVEQU1EIiwib3JnYW5pemF0aW9uSWQiOjY3MTI0LCJ1c2VySWQiOjc2OTE0LCJmb3JFeHBpcmF0aW9uQ2hlY2siOiI3ZWEyNWIwYi1jNDdhLTRkZDEtODQ1NC1jMzc2OTA2YWE1N2UifX0.AHpLqZdYZFtJ1e2iSRrCdg2c5oLTMncZQay2_puroJU";"""
    val saslMechanism = "PLAIN"

    val consumerConfig = mapOf(
            ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG to bootstrapServers,
            ConsumerConfig.GROUP_ID_CONFIG to groupId,
            ConsumerConfig.AUTO_OFFSET_RESET_CONFIG to "earliest",
            ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG to StringDeserializer::class.java,
            ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG to JsonDeserializer::class.java,
            "spring.kafka.consumer.properties.security.protocol" to securityProtocol,
            "spring.kafka.consumer.properties.sasl.jaas.config" to saslJaasConfig,
            "spring.kafka.consumer.properties.sasl.mechanism" to saslMechanism
    )

    val consumerTemplate = ReactiveKafkaConsumerTemplate<String, Promo>(consumerConfig)

    val objectMapper = ObjectMapper()

    val messageFlux: Flux<Promo> = consumerTemplate
            .receiveAutoAck()
            .map { record ->
                val value = record.value()
                objectMapper.readValue<Promo>(value)
            }

    messageFlux.subscribe { promo ->
        println("Received promo with id ${promo.promoId} and description ${promo.promoDescription}")
    }
}


import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.common.serialization.StringSerializer
import org.junit.ClassRule
import org.junit.Test
import org.springframework.kafka.test.rule.EmbeddedKafkaRule
import reactor.core.publisher.Flux
import reactor.kafka.receiver.KafkaReceiver
import reactor.kafka.receiver.ReceiverOptions
import reactor.kafka.receiver.ReceiverRecord
import reactor.kafka.sender.KafkaSender
import reactor.kafka.sender.SenderOptions
import reactor.kafka.sender.SenderRecord
import reactor.test.StepVerifier

class KafkaConsumerTest {
    companion object {
        @ClassRule
        @JvmField
        val embeddedKafkaRule = EmbeddedKafkaRule(1, true, "promo-topic")

        init {
            // Create the topic with required partitions and replicas
            val topic = embeddedKafkaRule.embeddedKafka().getTopics()[0]
            embeddedKafkaRule.embeddedKafka().addTopics(NewTopic(topic, 1, 1.toShort()))
        }
    }

    @Test
    fun testKafkaConsumer() {
        val bootstrapServers = embeddedKafkaRule.embeddedKafka().brokersAsString
        val topic = "promo-topic"
        val consumerGroupId = "promo-consumer-group"

        // Set up the Kafka Sender to produce test messages
        val senderOptions = SenderOptions.create<String, String>(mapOf(
            ProducerConfig.BOOTSTRAP_SERVERS_CONFIG to bootstrapServers,
            ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG to StringSerializer::class.java,
            ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG to StringSerializer::class.java
        ))

        val kafkaSender = KafkaSender.create(senderOptions)

        val testMessage = "Test message"
        val senderRecord = SenderRecord.create(topic, null, null, null, testMessage)
        kafkaSender.send(Flux.just(senderRecord)).blockLast()

        // Set up the Kafka Receiver to consume messages
        val receiverOptions = ReceiverOptions.create<String, String>(mapOf(
            ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG to bootstrapServers,
            ConsumerConfig.GROUP_ID_CONFIG to consumerGroupId,
            ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG to StringDeserializer::class.java,
            ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG to StringDeserializer::class.java
        ))
            .subscription(listOf(topic))

        val kafkaReceiver = KafkaReceiver.create(receiverOptions)

        val kafkaFlux: Flux<ReceiverRecord<String, String>> = kafkaReceiver.receive()

        // Use StepVerifier to verify the received messages
        StepVerifier.create(kafkaFlux)
            .assertNext { record ->
                val receivedMessage = record.value()
                // Assert that the received message matches the test message
                assertEquals(testMessage, receivedMessage)
            }
            .thenCancel()
            .verify()

        kafkaReceiver.close()
        kafkaSender.close()
    }
}

